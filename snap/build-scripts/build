#!/bin/bash
set -eu

apps="$@"
architectures="$KUBE_ARCH"

KUBE_SNAP_BINS="${KUBE_SNAP_BINS:-}"
if [ -z "$KUBE_SNAP_BINS" ]; then
  echo "KUBE_SNAP_BINS is not set, downloading binaries from upstream"
  export KUBE_SNAP_BINS=build/kube_bins/$KUBE_VERSION
  mkdir -p $KUBE_SNAP_BINS
  (cd $KUBE_SNAP_BINS
    for app in $apps; do
      if [ "$app" = "kubernetes-test" ]; then
        echo "Fetching $app $KUBE_VERSION"
        curl -LO \
          https://dl.k8s.io/${KUBE_VERSION}/${app}.tar.gz
        if ! file ${app}.tar.gz 2>&1 | grep -q 'gzip'; then
          echo "${app}.tar.gz is not a gzip archive"
          exit 1
        fi
      else
        for arch in $architectures; do
          mkdir -p $arch
          (cd $arch
            echo "Fetching $app $KUBE_VERSION $arch"
            curl -LO \
              https://dl.k8s.io/${KUBE_VERSION}/bin/linux/$arch/$app
            chmod +x $app
            if [[ ! -x $app ]]; then
              echo "${app} is not an executable"
              exit 1
            fi
          )
        done
      fi
    done
  )
fi

export KUBE_SNAP_ROOT="$(readlink -f .)"
export KUBE_SNAP_BINS="$(readlink -f $KUBE_SNAP_BINS)"

for app in $apps; do
  for arch in $architectures; do
    # Add -suffix if it's set
    snap_name="${app}${SNAP_SUFFIX:+-${SNAP_SUFFIX}}"

    echo "Building $snap_name $KUBE_VERSION for $arch from $KUBE_SNAP_BINS"
    build_dir=build/$app
    rm -rf $build_dir
    mkdir -p $build_dir

    export KUBE_ARCH="$arch"
    declare -A kube_arch_to_snap_arch=(
      [ppc64le]=ppc64el
      [arm]=armhf
    )
    export SNAP_ARCH="${kube_arch_to_snap_arch[$arch]:-$arch}"

    # replace the name (in case we have a suffix), version (stripping the 'v'),
    # and arch in our $app.yaml.
    sed -e "s/name: $app/name: $snap_name/g" \
        -e "s/\$KUBE_VERSION/${KUBE_VERSION:1}/g" \
        -e "s/\$SNAP_ARCH/$SNAP_ARCH/g" $app.yaml > $build_dir/snapcraft.yaml

    (cd $build_dir && snapcraft)
    mv $build_dir/*.snap build
  done
done
